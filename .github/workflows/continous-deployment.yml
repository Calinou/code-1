name: Continous deployment for sauerbraten
on:
  push:
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

jobs:
  build-macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
        with:
          lfs: true
      - name: Build for OSX
        working-directory: ./src/xcode
        run: xcodebuild -configuration Release -arch x86_64
      - name: Archive OSX App
        run: zip -r sauerbraten_macos.zip .
        working-directory: ./src/xcode/build/Release
      - uses: actions/upload-artifact@v1
        with: 
          name: sauerbraten_macos
          path: ./src/xcode/build/Release/sauerbraten_macos.zip
  build-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
        with:
          lfs: true
      - name: Setup MSBuild
        uses: warrenbuckley/Setup-MSBuild@v1
      - name: Build for Windows
        working-directory: ./src/vcpp
        run: msbuild /p:PlatformToolset=v142 /property:Platform=x64 /p:Configuration=Release sauerbraten.sln
      - name: Archive Windows binaries
        run: Compress-Archive -Path .\bin64, .\sauerbraten.bat -DestinationPath sauerbraten_windows.zip
      - uses: actions/upload-artifact@v1
        with: 
          name: sauerbraten_windows
          path: ./sauerbraten_windows.zip
  build-ubuntu:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          lfs: true
      - name: Install C and C++ header files
        run: |
          sudo apt-get update
          sudo apt-get install -y libsdl-dev libsdl2-mixer-dev libsdl2-image-dev zlib1g-dev
      - name: Build for Ubuntu
        working-directory: ./src
        run: make
      - name: Archive Ubuntu binaries
        run: |
          cp ./src/sauer_client bin_unix/linux_64_client
          cp ./src/sauer_server bin_unix/linux_64_server
          zip -r sauerbraten_ubuntu.zip ./sauerbraten_unix ./bin_unix
      - uses: actions/upload-artifact@v1
        with: 
          name: sauerbraten_ubuntu
          path: ./sauerbraten_ubuntu.zip
  release:
    runs-on: ubuntu-latest
    needs: [build-macos, build-windows, build-ubuntu]
    steps:
      - uses: actions/checkout@v2
        with:
          repository: tomatenquark/essential
      - uses: actions/download-artifact@v1
        with:
          name: sauerbraten_macos
      - uses: actions/download-artifact@v1
        with:
          name: sauerbraten_windows
      - uses: actions/download-artifact@v1
        with:
          name: sauerbraten_ubuntu
      - name: Add release assets to OSX archive
        run: |
          mkdir -p sauerbraten.app/Contents/gamedata
          cp -r ../data ../packages sauerbraten.app/Contents/gamedata
          zip -ur sauerbraten_macos.zip ./sauerbraten.app
        working-directory: ./sauerbraten_macos
      - name: Add release assets to Windows archive
        run: |
          cp -r ../data ../packages .
          zip -ur sauerbraten_windows.zip ./packages ./data
        working-directory: ./sauerbraten_windows
      - name: Add release assets to Ubuntu archive
        run: |
          cp -r ../data ../packages .
          zip -ur sauerbraten_ubuntu.zip ./packages ./data
        working-directory: ./sauerbraten_ubuntu
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: true
      - name: Upload OSX App
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./sauerbraten_macos/sauerbraten_macos.zip
          asset_name: sauerbraten_macos.zip
          asset_content_type: application/zip
      - name: Upload Windows binaries
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./sauerbraten_windows/sauerbraten_windows.zip
          asset_name: sauerbraten_windows.zip
          asset_content_type: application/zip
      - name: Upload Ubuntu binaries
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./sauerbraten_ubuntu/sauerbraten_ubuntu.zip
          asset_name: sauerbraten_ubuntu.zip
          asset_content_type: application/zip
